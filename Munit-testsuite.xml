<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
	<munit:config name="munit" doc:name="MUnit configuration" mock-connectors="false" mock-inbounds="false"/>
	<spring:beans>
 		<spring:import resource="classpath:tasb_origamionbase_alp_bi_interface.xml" />
		<spring:import resource="classpath:MF_Claim_Implementation.xml" />
		<spring:import resource="classpath:MF_Event_implementation.xml" />
		<spring:import resource="classpath:MF_Eventbyadj_implementation.xml" />
		<spring:import resource="classpath:MF_Token_Authorization.xml" />
	</spring:beans>
	<munit:test
		name="test1"
		description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock Token">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami AuthenticationService']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/token.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Claim">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService1']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/claim.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Member">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService2']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/member.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock ClaimId">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService3']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/claimid.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Adjuster">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService4']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/adjuster.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when doc:name="Mock Loss" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService5']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/loss.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when doc:name="Mock ClaimData" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService6']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/claimdata.xml')]" mimeType="application/xml"/>
        </mock:when>
		<munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[['claimnumber':'test1234']]" encoding="UTF-8" mimeType="application/java"/>
            </munit:inbound-properties>
		</munit:set>
		<flow-ref name="get:/claim/{claimnumber}:onbaseapiv6-config"
			doc:name="get:/claim/{claimnumber}:onbaseapiv6-config" />
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-on-equals message="ClaimNumber Not Matched" expectedValue="#['test1234']" actualValue="#[payload.ClaimNumber]" doc:name="Assert Equals"/>
	</munit:test>
	
	<munit:test
		name="test2"
		description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock Token">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami AuthenticationService']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/token.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Event">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService1']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/event.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Member">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami Dynamic Service2']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/member.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock ClaimId">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService3']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/claimdata.xml')]" mimeType="application/xml"/>
        </mock:when>
		<munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[['eventnumber':'test1234']]" encoding="UTF-8" mimeType="application/java"/>
            </munit:inbound-properties>
		</munit:set>
		<flow-ref name="get:/event/{eventnumber}:onbaseapiv6-config"
			doc:name="get:/event/{eventnumber}:onbaseapiv6-config" />
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-on-equals message="ClaimNumber Not Matched" expectedValue="#['test1234']" actualValue="#[payload.EventNumber]" doc:name="Assert Equals"/>
	</munit:test>
	
	<munit:test
		name="test3"
		description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock Token">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami AuthenticationService']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/token.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Loss">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService1']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/event.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Adjuster">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService2']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/adjuster.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock AdjusterName">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService3']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/adjuster.xml')]" mimeType="application/xml"/>
        </mock:when>
        <mock:when doc:name="Mock Event" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Origami DynamicService4']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('example/event.xml')]" mimeType="application/xml"/>
        </mock:when>
		<munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[['eventnumber':'test1234']]" encoding="UTF-8" mimeType="application/java"/>
            </munit:inbound-properties>
		</munit:set>
		<flow-ref name="get:/eventbyadj/{eventnumber}:onbaseapiv6-config"
			doc:name="get:/eventbyadj/{eventnumber}:onbaseapiv6-config" />
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-on-equals message="ClaimNumber Not Matched" expectedValue="#['test1234']" actualValue="#[payload.EventNumber]" doc:name="Assert Equals"/>
	</munit:test>
	
</mule>
